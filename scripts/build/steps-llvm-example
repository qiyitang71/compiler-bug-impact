#!/bin/bash
#set -x

if [ $# -ne 1 ]
  then
    echo "No arguments supplied. Usage is ./steps-llvm-example bugid"
    exit 1
fi
bug_id=$1

results_folder="/home/user42/compiler-bug-impact/example/results"
working_folder="/home/user42/compiler-bug-impact/scripts/build"
tasks_folder="$results_folder/$bug_id"
tmpresults_folder=/home/user42/tmp_results

if [ -d "$tasks_folder" ] 
  then
   echo "Folder with bug ID seems to exist already. Stopping here."
   exit 1
fi
if ! [ -e $working_folder/tasks.json ]; then echo "error: tasks.json was not provided"; exit 1; fi

rm -rf "$tasks_folder"
rm -rf "$tmpresults_folder"
mkdir -p  "$tmpresults_folder"

#update chroot
sudo sbuild-update -udcar stretch-amd64-sbuild > /dev/null

# move the script which replaces gcc with our compilers to chroot 
if [[ $bug_id = '11964' || $bug_id = '11977' || $bug_id = '12189' ]]; then
  sudo cp "$working_folder"/patch_scripts/compiler-patched-old /srv/chroot/stretch-amd64-sbuild/tmp/compiler-patched
else
  sudo cp "$working_folder"/patch_scripts/compiler-patched /srv/chroot/stretch-amd64-sbuild/tmp/compiler-patched
fi
sudo chown user42:sbuild /srv/chroot/stretch-amd64-sbuild/tmp/compiler-patched
sudo chmod +x /srv/chroot/stretch-amd64-sbuild/tmp/compiler-patched

# (un)set dpkg flags
sudo rm -f /srv/chroot/stretch-amd64-sbuild/etc/dpkg/buildflags.conf
if grep -q "$bug_id" "$working_folder"/dpkg-list; then
  sudo cp "$working_folder"/dpkg_flags/buildflags.conf /srv/chroot/stretch-amd64-sbuild/etc/dpkg/buildflags.conf
elif [[ $bug_id = '19636' || $bug_id = '28504' ]]; then
  sudo cp "$working_folder"/dpkg_flags/buildflags.conf_O0 /srv/chroot/stretch-amd64-sbuild/etc/dpkg/buildflags.conf
fi

maxtaskid=$(($(cat $working_folder/tasks.json | jq length)-1))
mkdir -p "$tasks_folder"
{
  echo ""$(date | awk '{print $4}')" - STARTING STEPS FOR BUG "$bug_id
  sucessful_build=0
  bug_reached=0
  bug_triggered=0
  binaries_different=0
  test_suite_aborted=0
  test_suite_different=0
  for i in `seq 0 $maxtaskid`;
  do
    cd $working_folder
    rm -f task.tmp
    bug_triggered_bool=1 
    cat "$working_folder"/tasks.json | jq .[$i] > task.tmp1
    PACKAGE_NAME=$(echo $(cat task.tmp1 | jq '.source') | cut -d'"' -f 2)
    LOG_FILE=$tasks_folder/$PACKAGE_NAME/cop-build.log
    cat task.tmp1 | jq '.logfile="'$LOG_FILE'"' > task.tmp2
    VERSION=$(apt-cache madison $PACKAGE_NAME | awk '$7 ~ /.*Sources/' | awk '{print $3}' | head -1)
    #VERSION=$(rmadison $PACKAGE_NAME | awk '$5 ~ /^stable$/' | awk '$7 ~ /source/' | awk '{print $3}')
    cat task.tmp2 | jq '.version="'$VERSION'"' > task.tmp
    rm -f task.tmp1 task.tmp2

    echo "--> ["$(($i+1))"/"$(($maxtaskid+1))"] "$(date | awk '{print $4}')" - PROCESSING PACKAGE "$PACKAGE_NAME
    mkdir "$tasks_folder"/$PACKAGE_NAME

    ############################### STEP 1 ###############################    
    echo "    STEP 1"
    echo "    .. Building package with cop compiler (output in "$LOG_FILE")"
    # Set cop compiler for use in chroot
    sudo rm -rf /srv/chroot/stretch-amd64-sbuild/home/compiler/llvm-install
    sudo cp -r /srv/chroot/stretch-amd64-sbuild/home/compiler/cop/llvm-install /srv/chroot/stretch-amd64-sbuild/home/compiler/
    # Build package with cop compiler
    sudo "$working_folder"/process-task -v -t task.tmp &> $LOG_FILE
    # Check if cop build was successfull and if so goes on with next steps
    if grep -q "DC-Status: OK" $LOG_FILE; then
      sucessful_build=$(( sucessful_build+1 ))
     # Check if bug triggered
      if grep -q "Optimization reached!" $LOG_FILE; then
        bug_reached=$(( bug_reached+1 ))
        echo "    .. package was successfully built with cop compiler AND bug was reached"
      else
        echo "    .. package was successfully built with cop compiler and bug was NOT reached"
        if grep -q "Bug Triggered!" $LOG_FILE; then
          echo "    .. failure: bug was detected as triggered but not reached, which is inconsistent"
          break
        fi
        bug_triggered_bool=0
      fi
      if grep -q "Bug Triggered!" $LOG_FILE; then
        bug_triggered=$(( bug_triggered+1 ))
        echo "    .. bug also triggered"
      else
        echo "    .. bug did NOT trigger"
        bug_triggered_bool=0
      fi
    else
      # Check if bug triggered
      if grep -q "Bug Triggered!" $LOG_FILE; then
        echo "    .. error: package build with cop compiler failed (BUT bug triggered)"
      else
        echo "    .. error: package build with cop compiler failed (and bug did not trigger)"
      fi
      continue
    fi  
    ############################### STEP 2 ###############################
    echo "    STEP 2"
    LOG_FILE_BUGGY=$tasks_folder/$PACKAGE_NAME/buggy-build.log
    echo "    .. Building package with buggy compiler (output in "$LOG_FILE_BUGGY")"
    # Set buggy compiler for use in chroot
    sudo rm -rf /srv/chroot/stretch-amd64-sbuild/home/compiler/llvm-install
    sudo cp -r /srv/chroot/stretch-amd64-sbuild/home/compiler/buggy/llvm-install /srv/chroot/stretch-amd64-sbuild/home/compiler/
    # Build package with buggy compiler
    cat task.tmp | jq '.logfile="'$LOG_FILE_BUGGY'"' > task.tmp1
    mv -f task.tmp1 task.tmp
    rm -rf "$tmpresults_folder"/*
    sudo "$working_folder"/process-task-keep -v -t task.tmp &> $LOG_FILE_BUGGY
    # Check if buggy build was successfull and if so goes on with next steps
    if grep -q "DC-Status: OK" $LOG_FILE_BUGGY; then
     echo "    .. package was successfully built with buggy compiler"
    else
     echo "    .. error: package build with buggy compiler failed"
     if [[ $PACKAGE_NAME != 'zsh' && $PACKAGE_NAME != 'leveldb' ]]; then 
      continue
     fi
    fi

    # Save source and built package
    mkdir $tasks_folder/$PACKAGE_NAME/buggy-func
    TEST_FOLDER=$(grep "Log filtering will replace.*with '<<CHROOT>>'" $LOG_FILE_BUGGY | cut -d"'" -f 2 | cut -c 4-)/build/test
    cp -r $TEST_FOLDER/* $tasks_folder/$PACKAGE_NAME/buggy-func
    rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/*.deb
    rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/*.changes
    rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/*.tar.xz
    rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/*.tar.gz
    rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/*.buildinfo
    rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/*.dsc

    if [[ $PACKAGE_NAME != 'zsh' && $PACKAGE_NAME != 'leveldb' ]]; then 
     mv "$tmpresults_folder"/$(ls "$tmpresults_folder" | head -1) $tasks_folder/$PACKAGE_NAME/buggy-packages
    fi

    sudo schroot --end-session --all-sessions

    LOG_FILE_FIXED=$tasks_folder/$PACKAGE_NAME/fixed-build.log
    echo "    .. Building package with fixed compiler (output in "$LOG_FILE_FIXED")"
    # Set fixed compiler for use in chroot
    sudo rm -rf /srv/chroot/stretch-amd64-sbuild/home/compiler/llvm-install
    sudo cp -r /srv/chroot/stretch-amd64-sbuild/home/compiler/fixed/llvm-install /srv/chroot/stretch-amd64-sbuild/home/compiler/
    # Build package with fixed compiler
    cat task.tmp | jq '.logfile="'$LOG_FILE_FIXED'"' > task.tmp1
    mv -f task.tmp1 task.tmp
    rm -rf "$tmpresults_folder"/*
    sudo "$working_folder"/process-task-keep -v -t task.tmp &> $LOG_FILE_FIXED
    # Check if fixed build was successfull and if so goes on with next steps
    if grep -q "DC-Status: OK" $LOG_FILE_FIXED; then
     echo "    .. package was successfully built with fixed compiler"
    else
     echo "    .. error: package build with fixed compiler failed"
     continue
    fi

    # Save source and built package
    mkdir $tasks_folder/$PACKAGE_NAME/fixed-func
    TEST_FOLDER=$(grep "Log filtering will replace.*with '<<CHROOT>>'" $LOG_FILE_FIXED | cut -d"'" -f 2 | cut -c 4-)/build/test
    cp -r $TEST_FOLDER/* $tasks_folder/$PACKAGE_NAME/fixed-func
    rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/*.deb
    rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/*.changes
    rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/*.tar.xz
    rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/*.tar.gz
    rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/*.buildinfo
    rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/*.dsc

    mv "$tmpresults_folder"/$(ls "$tmpresults_folder" | head -1) $tasks_folder/$PACKAGE_NAME/fixed-packages

    sudo schroot --end-session --all-sessions

    echo "    .. Comparing the binaries produced by the buggy and fixed compiler"
    # Unpack binary packages (there can be several .deb binary paxkage produced for one .dsc source package, unpacking only the root one)
    if [[ $PACKAGE_NAME != 'zsh' && $PACKAGE_NAME != 'leveldb' ]]; then
     cd $tasks_folder/$PACKAGE_NAME/buggy-packages
     filename=$(ls *.dsc); deb_file="${filename%.*}_amd64.deb"
     mkdir ../buggy-binaries
     for f in *.deb; do 
       dpkg -x $f ../buggy-binaries/${f%.*}
     done
    else
     mkdir $tasks_folder/$PACKAGE_NAME/buggy-binaries
    fi
    
    cd $tasks_folder/$PACKAGE_NAME/fixed-packages
    filename=$(ls *.dsc); deb_file="${filename%.*}_amd64.deb"
    mkdir ../fixed-binaries
    for f in *.deb; do
       dpkg -x $f ../fixed-binaries/${f%.*}
    done

    cd $results_folder
    # Compare unpacked binaries 
    DIFF_FILE_BINARIES=$tasks_folder/$PACKAGE_NAME/binaries-diff.txt
    diff -r --no-dereference $tasks_folder/$PACKAGE_NAME/buggy-binaries/ $tasks_folder/$PACKAGE_NAME/fixed-binaries/ > $DIFF_FILE_BINARIES 2>&1

    # in the case of 'zsh' or 'leveldb', make buggy binaries the same as the fixed binaries so that funtion analysis could be undertaken later
    if [[ $PACKAGE_NAME = 'zsh' ]] || [[ $PACKAGE_NAME = 'leveldb' ]]; then
      cp -rf $tasks_folder/$PACKAGE_NAME/fixed-binaries/* $tasks_folder/$PACKAGE_NAME/buggy-binaries/
    fi

    # report if the unpacked binaries similar or not
    if [[ -s $DIFF_FILE_BINARIES ]]; then 
      binaries_different=$(( binaries_different+1 ))
      echo "    .. the binaries seem different (please check details in "$DIFF_FILE_BINARIES")"
      if [ $bug_triggered_bool -eq 0 ]; then
        echo "    .. failure: bug did not trigger but the binaries are different, which is inconsistent, INVESTIGATE!"
      fi  
    else 
      echo "    .. the binaries are the same"
      rm -rf $tasks_folder/$PACKAGE_NAME/buggy-binaries/
      rm -rf $tasks_folder/$PACKAGE_NAME/fixed-binaries/
      rm -rf $tasks_folder/$PACKAGE_NAME/buggy-packages/
      rm -rf $tasks_folder/$PACKAGE_NAME/fixed-packages/
      rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/
      rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/
      continue
    fi
    ############################### STEP 3 ###############################
    echo "    STEP 3"
    echo "    .. Running test suites with the buggy and fixed binaries and comparing results"
    if grep -q "Testsuite" $tasks_folder/$PACKAGE_NAME/fixed-packages/$filename; then
      echo "    .. the corresponding source package contains a valid test suite"
    else
      echo "    .. the corresponding source package does NOT contain a valid test suite"
      test_suite_aborted=$(( test_suite_aborted+1 ))
      continue
    fi
    DIFF_FILE_TESTS=$tasks_folder/$PACKAGE_NAME/test-diff.txt
    
    # check whether if 'make check' fails while building the application 
    # which implies that test suites failed while building with the buggy compiler
    # AND test suites were successful while building with the fixed compiler
    if grep -q "\[check\] Error" $LOG_FILE_BUGGY; then
      test_suite_different=$(( test_suite_different+1 ))
      echo "    .. the test suite runs seem to produce different outputs (please check details in $LOG_FILE_BUGGY)"
      continue
    fi

    # Executing the test suites
    sudo sbuild-update -udcar stretch-amd64-sbuild > /dev/null
    autopkgtest -B --summary=$tasks_folder/$PACKAGE_NAME/tests-buggy.summary  $tasks_folder/$PACKAGE_NAME/buggy-packages/*.deb $tasks_folder/$PACKAGE_NAME/buggy-packages/*.dsc -U -- schroot stretch-amd64-sbuild &> $tasks_folder/$PACKAGE_NAME/test-buggy.txt
    autopkgtest -B --summary=$tasks_folder/$PACKAGE_NAME/tests-fixed.summary  $tasks_folder/$PACKAGE_NAME/fixed-packages/*.deb $tasks_folder/$PACKAGE_NAME/fixed-packages/*.dsc -U -- schroot stretch-amd64-sbuild &> $tasks_folder/$PACKAGE_NAME/test-fixed.txt
  
    rm -rf $tasks_folder/$PACKAGE_NAME/buggy-packages/
    rm -rf $tasks_folder/$PACKAGE_NAME/fixed-packages/

    # check if the application is phyml, samba or mod-gearman
    # these three applications are excluded because their symbols are stripped 
    if [[ $PACKAGE_NAME = 'phyml' || $PACKAGE_NAME = 'samba' || $PACKAGE_NAME = 'mod-gearman' ]]; then
      rm -rf $tasks_folder/$PACKAGE_NAME/buggy-binaries/
      rm -rf $tasks_folder/$PACKAGE_NAME/fixed-binaries/
      rm -rf $tasks_folder/$PACKAGE_NAME/buggy-func/
      rm -rf $tasks_folder/$PACKAGE_NAME/fixed-func/
    fi

    # Compare test suite runs and report if similar or not
    diff $tasks_folder/$PACKAGE_NAME/tests-buggy.summary $tasks_folder/$PACKAGE_NAME/tests-fixed.summary &> $DIFF_FILE_TESTS
    if ! grep -q -e "PASS" $tasks_folder/$PACKAGE_NAME/tests-buggy.summary || ! grep -q -e "PASS" $tasks_folder/$PACKAGE_NAME/tests-fixed.summary; then
      echo "    .. warning: no test was run successfully for at least one binary, please investigate manually"
      test_suite_aborted=$(( test_suite_aborted+1 ))
      continue
    fi
    rm $tasks_folder/$PACKAGE_NAME/tests-fixed.summary $tasks_folder/$PACKAGE_NAME/tests-buggy.summary
    if [[ -s $DIFF_FILE_TESTS ]]; then 
      test_suite_different=$(( test_suite_different+1 ))
      echo "    .. the test suite runs seem to produce different outputs (please check details in "$DIFF_FILE_TESTS")"
    else 
      echo "    .. no difference between the test suite runs"
    fi
  done
  echo "$bug_id - $(( maxtaskid+1 )) $sucessful_build $bug_reached $bug_triggered $binaries_different $test_suite_aborted $test_suite_different"
} | tee "$tasks_folder"/new-"$bug_id".txt
rm -f $working_folder/task.tmp
echo ""$(date | awk '{print $4}')" - STEPS FOR BUG "$bug_id" DONE";
